"""
The configuration file would look like this (sans those // comments):

{
    "authority": "https://login.microsoftonline.com/Enter_the_Tenant_Name_Here",
    "client_id": "your_client_id",
    "scope": ["https://graph.microsoft.com/.default"],
        // For more information about scopes for an app, refer:
        // https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-client-creds-grant-flow#second-case-access-token-request-with-a-certificate"

    "secret": "The secret generated by AAD during your confidential app registration",
        // For information about generating client secret, refer:
        // https://github.com/AzureAD/microsoft-authentication-library-for-python/wiki/Client-Credentials#registering-client-secrets-using-the-application-registration-portal

    "endpoint": "https://graph.microsoft.com/v1.0/users"

}

You can then run this sample with a JSON configuration file:

    python sample.py parameters.json
"""

import sys  # For simplicity, we'll read config file from 1st CLI param sys.argv[1]
import json
import logging

import requests
import msal


# Optional logging
# logging.basicConfig(level=logging.DEBUG)

config = json.load(open(sys.argv[1]))

# Create a preferably long-lived app instance which maintains a token cache.
app = msal.ConfidentialClientApplication(
    config["client_id"], authority=config["authority"],
    client_credential=config["secret"],
    # token_cache=...  # Default cache is in memory only.
                       # You can learn how to use SerializableTokenCache from
                       # https://msal-python.rtfd.io/en/latest/#msal.SerializableTokenCache
    )

# The pattern to acquire a token looks like this.
result = None

# Firstly, looks up a token from cache
# Since we are looking for token for the current app, NOT for an end user,
# notice we give account parameter as None.
result = app.acquire_token_silent(config["scope"], account=None)

if not result:
    logging.info("No suitable token exists in cache. Let's get a new one from AAD.")
    result = app.acquire_token_for_client(scopes=config["scope"])

if "access_token" in result:
    # Calling graph using the access token
    # graph_data = requests.get(  # Use token to call downstream service
    #     config["endpoint"],
    #     headers={'Authorization': 'Bearer ' + result['access_token']}, ).json()
    # print("Graph API call result: ")
    # print(json.dumps(graph_data, indent=2))

    graph_groups_data = requests.get(config["endpoint_groups"],
        headers = {'Authorization': 'Bearer ' + result['access_token']}, ).json()
    print("Graph API call result: ")
    #print(json.dumps(graph_groups_data, indent=2))

    teams = []

    for group in graph_groups_data["value"]:
        team = {}
        print("Team Name: " + str(group["displayName"]))
        print("Team Enable: " + str(group["resourceProvisioningOptions"]))
        print("Team id: " + str(group["id"]))

        if "Team" in group["resourceProvisioningOptions"]:
            team['id'] = group["id"]
            team['displayName'] = group["displayName"]
            team['teamEnabled'] = group["resourceProvisioningOptions"]
            teams.append(team)
        print("Listado de teams (" + str(len(teams)) + "): " + str(json.dumps(teams)))


    for team in teams:
        print('#######################################')
        graph_team_data = requests.get(config["endpoint_groups"] + '/' + team['id'] + '/members',
            headers = {'Authorization': 'Bearer ' + result['access_token']}, ).json()
        print('Graph API call result for team ' + str(team['displayName']) + ': ')
        #print(json.dumps(graph_team_data, indent=2))
        for user in graph_team_data['value']:
            if 'displayName' in user and user['displayName'] and user['givenName'] is not None: print('displayName: ' + user['displayName'] + user['givenName'])
            if 'mail' in user and user['mail'] is not None: print('mail: ' + user['mail'])
            if 'jobTitle' in user and user['jobTitle'] is not None: print('jobTitle: ' + user['jobTitle'])


else:
    print(result.get("error"))
    print(result.get("error_description"))
    print(result.get("correlation_id"))  # You may need this when reporting a bug

